


ARM Macro Assembler    Page 1 


    1 00000000         ; Luke Soldano, Xavier Agostini (C) 2016
    2 00000000         ; McGill University, ECSE 426, Lab One
    3 00000000         ; Assembly code to implemenet a Kalmann filter
    4 00000000         
    5 00000000                 AREA             fn, CODE, READONLY
    6 00000000                 EXPORT           Kalmanfilter_asm
    7 00000000         Kalmanfilter_asm
    8 00000000         
    9 00000000         ; ******************************************************
                       ********************************** TALK TO TA ABOUT CHEC
                       K FOR OVERFLOW ETC
   10 00000000         
   11 00000000         ; Filter takes four input paramaters
   12 00000000         ; 1. A pointer to the input data array
   13 00000000         ; 2. A pointer to the filtered data array
   14 00000000         ; 3. The length of the arrays
   15 00000000         ; 4. A pointer to the Kalmann filter struct/state
   16 00000000         
   17 00000000         ; For the function return value, registers R0/R1 & S0/S1
                        
   18 00000000         ; are used for integer and floating-point results respec
                       tively
   19 00000000         
   20 00000000         ; Register inputs (Input array, output array, array leng
                       th, kalman struct address)
   21 00000000         
   22 00000000         ; Filter will hold its state as a quintuple (q,r,x,p,k) 
                       - all fp #'s
   23 00000000         ; Filter will load these values into registers (S4,S5,S6
                       ,S7,S8)
   24 00000000         
   25 00000000         ; Initialize q,r,x,p,k
   26 00000000         ; Load kalman state values into proper fp registers
   27 00000000 ED93 2A00       VLDR.f32         S4, [R3, #0] ; float q
   28 00000004 EDD3 2A01       VLDR.f32         S5, [R3, #4] ; float r 
   29 00000008 ED93 3A02       VLDR.f32         S6, [R3, #8] ; float x
   30 0000000C EDD3 3A03       VLDR.f32         S7, [R3, #12] ; float p
   31 00000010 ED93 4A04       VLDR.f32         S8, [R3, #16] ; float k
   32 00000014         
   33 00000014         ; Initialize loop counter
   34 00000014 F04F 0400       MOV              R4, #0
   35 00000018         
   36 00000018         ; Start loop
   37 00000018         loop
   38 00000018         
   39 00000018         ; Load input array
   40 00000018 EDD0 4A00       VLDR.f32         S9, [R0, #0] ; load proper inde
                                                            x of input array to
                                                             S9 (measurement va
                                                            lue) 
   41 0000001C         
   42 0000001C         ; Find values of p and k
   43 0000001C EE73 3A82       VADD.f32         S7, S7, S4  ; p = p + q 
   44 00000020 EE33 5AA2       VADD.f32         S10, S7, S5 ; p + r 
   45 00000024 EE83 4A85       VDIV.f32         S8, S7, S10 ; k = p / (p + r)
   46 00000028         
   47 00000028         ; Check for division overflow
   48 00000028         ; LDR ASPR, FPSCR
   49 00000028         ; TODO: Perform check



ARM Macro Assembler    Page 2 


   50 00000028         
   51 00000028         ; Find value of x
   52 00000028 EE74 5AC3       VSUB.f32         S11, S9, S6 ; (measurement - x)
                                                            
   53 0000002C EE24 6A25       VMUL.f32         S12, S8, S11 ; k * (measurement
                                                             - x)
   54 00000030         
   55 00000030         ; Check for multiplication overflow
   56 00000030         ; LDR ASPR, FPSCR
   57 00000030         ; TODO: Perform check
   58 00000030         
   59 00000030         ; Finish operation on x
   60 00000030 EE33 3A06       VADD.f32         S6, S6, S12 ; x = x + k *(measu
                                                            rement - x)
   61 00000034         
   62 00000034         ; Find value of p
   63 00000034 EEF7 5A00       VLDR.f32         S11, =1.0
   64 00000038 EE35 5AC4       VSUB.f32         S10, S11, S8 ; (1 - k)
   65 0000003C EE65 3A23       VMUL.f32         S7, S10, S7 ; p = (1 - k) * p
   66 00000040         
   67 00000040         ; Check for multiplication overflow
   68 00000040         ; LDR ASPR, FPSCR
   69 00000040         ; TODO: Perform check
   70 00000040         
   71 00000040         ; Load x into return register and update output array an
                       d struct values
   72 00000040 EEB0 0A43       VMOV.f32         S0, S6
   73 00000044 EC83 2A05       VSTM             R3, {S4-S8}
   74 00000048 EC81 3A01       VSTM             R1, S6      ; TODO Fix incremen
                                                            ts
   75 0000004C         
   76 0000004C         ; Increment R0 & R1 addresses to return proper pointer f
                       or next iteration
   77 0000004C F100 0004       ADD              R0, R0, #4
   78 00000050 F101 0104       ADD              R1, R1, #4
   79 00000054         
   80 00000054         ; Determine whether or not loop should continue
   81 00000054 F104 0401       ADD              R4, R4, #1
   82 00000058 4294            CMP              R4, R2
   83 0000005A DBDD            BLT              loop
   84 0000005C         
   85 0000005C         ; Return from branch
   86 0000005C 4770            BX               LR
   87 0000005E                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\kalmanfilter_asm.d -o.\objects\kalmanfilter_asm.o -IC
:\MP426_Lab1\MP426_Lab1\Lab1_STM32F4Cube_Base_project\RTE -IC:\Keil_v5\ARM\PACK
\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\D
rivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__UVISION_VERSION SETA 51
5" --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --list=.\listing
s\kalmanfilter_asm.lst Kalmanfilter_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Kalmanfilter_asm 00000000

Symbol: Kalmanfilter_asm
   Definitions
      At line 7 in file Kalmanfilter_asm.s
   Uses
      At line 6 in file Kalmanfilter_asm.s
Comment: Kalmanfilter_asm used once
fn 00000000

Symbol: fn
   Definitions
      At line 5 in file Kalmanfilter_asm.s
   Uses
      None
Comment: fn unused
loop 00000018

Symbol: loop
   Definitions
      At line 37 in file Kalmanfilter_asm.s
   Uses
      At line 83 in file Kalmanfilter_asm.s
Comment: loop used once
3 symbols
337 symbols in table
