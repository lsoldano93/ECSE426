


ARM Macro Assembler    Page 1 


    1 00000000         ; Luke Soldano, Xavier Agostini (C) 2016
    2 00000000         ; McGill University, ECSE 426, Lab One
    3 00000000         ; Assembly code to implemenet a Kalmann filter
    4 00000000         
    5 00000000                 AREA             fn, CODE, READONLY
    6 00000000                 EXPORT           Kalmanfilter_asm
    7 00000000         Kalmanfilter_asm
    8 00000000         
    9 00000000         ; Filter takes four input paramaters
   10 00000000         ; 1. A pointer to the input data array
   11 00000000         ; 2. A pointer to the filtered data array
   12 00000000         ; 3. The length of the arrays
   13 00000000         ; 4. A pointer to the Kalmann filter struct/state
   14 00000000         
   15 00000000         ; For the function return value, registers R0/R1 & S0/S1
                        
   16 00000000         ; are used for integer and floating-point results respec
                       tively
   17 00000000         
   18 00000000         ; Register inputs (Input array, output array, array leng
                       th, kalman struct address)
   19 00000000         
   20 00000000         ; Filter will hold its state as a quintuple (q,r,x,p,k) 
                       - all fp #'s
   21 00000000         ; Filter will load these values into registers (S4,S5,S6
                       ,S7,S8)
   22 00000000         
   23 00000000         ; Initialize q,r,x,p,k
   24 00000000         ; Load kalman state values into proper fp registers
   25 00000000         ; Check for overflowed inputs
   26 00000000 BF68 ED93 
              2A00             VLDRVS.f32       S4, [R3, #0] ; float q
   27 00000006 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   28 0000000A D63E            BVS              ERROR_OUT
   29 0000000C BF68 EDD3 
              2A01             VLDRVS.f32       S5, [R3, #4] ; float r 
   30 00000012 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   31 00000016 D638            BVS              ERROR_OUT
   32 00000018 BF68 ED93 
              3A02             VLDRVS.f32       S6, [R3, #8] ; float x
   33 0000001E EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   34 00000022 D632            BVS              ERROR_OUT
   35 00000024 BF68 EDD3 
              3A03             VLDRVS.f32       S7, [R3, #12] ; float p
   36 0000002A EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   37 0000002E D62C            BVS              ERROR_OUT
   38 00000030 BF68 ED93 
              4A04             VLDRVS.f32       S8, [R3, #16] ; float k
   39 00000036 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   40 0000003A D626            BVS              ERROR_OUT
   41 0000003C         
   42 0000003C         ; Initialize loop counter
   43 0000003C F04F 0400       MOV              R4, #0
   44 00000040         
   45 00000040         ; Start loop
   46 00000040         LOOP
   47 00000040         
   48 00000040         ; Load input array value and check for overflowed input
   49 00000040 EDD0 4A00       VLDR.f32         S9, [R0, #0] ; load proper inde



ARM Macro Assembler    Page 2 


                                                            x of input array to
                                                             S9 (measurement va
                                                            lue)
   50 00000044 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   51 00000048 D61F            BVS              ERROR_OUT
   52 0000004A         
   53 0000004A         ; Find values of p and k and make sure no overflow by ad
                       ditions
   54 0000004A EE73 3A82       VADD.f32         S7, S7, S4  ; p = p + q 
   55 0000004E EE33 5AA2       VADD.f32         S10, S7, S5 ; p + r 
   56 00000052         
   57 00000052         ; Check for zero (not a number) in divisor
   58 00000052         ; Will also check for overflow - S10 won't be written to
                        if overflow occurs in addition
   59 00000052 EEB5 5A40       VCMP.f32         S10, #0
   60 00000056 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   61 0000005A D016            BEQ              ERROR_OUT
   62 0000005C         
   63 0000005C         ; Finish operation on k
   64 0000005C EE83 4A85       VDIV.f32         S8, S7, S10 ; k = p / (p + r)
   65 00000060         
   66 00000060         ; Find value of x
   67 00000060 EE34 5AC3       VSUB.f32         S10, S9, S6 ; (measurement - x)
                                                            
   68 00000064 EEA4 3A05       VFMA.f32         S6, S8, S10 ; x + k * (measurem
                                                            ent - x)
   69 00000068         
   70 00000068         ; Find value of p
   71 00000068 EEE4 3A63       VFMS.f32         S7, S8, S7  ; p = (1 - k) * p
   72 0000006C         
   73 0000006C         ; Update output array and struct values
   74 0000006C EC83 2A05       VSTM             R3, {S4-S8}
   75 00000070 EC81 3A01       VSTM             R1, S6
   76 00000074         
   77 00000074         ; Increment R0 & R1 addresses to return proper pointer f
                       or next iteration
   78 00000074 F100 0004       ADD              R0, R0, #4
   79 00000078 F101 0104       ADD              R1, R1, #4
   80 0000007C         
   81 0000007C         ; Determine whether or not loop should continue
   82 0000007C F104 0401       ADD              R4, R4, #1
   83 00000080 4294            CMP              R4, R2
   84 00000082 DBDD            BLT              LOOP
   85 00000084         
   86 00000084         ; Load 0 into return register to indicate no error
   87 00000084 F04F 0000       MOV              R0, #0
   88 00000088         
   89 00000088         ; Return from branch
   90 00000088 4770            BX               LR
   91 0000008A         
   92 0000008A         ; Function called when overflow or other error detected
   93 0000008A         ERROR_OUT
   94 0000008A         
   95 0000008A         ; Load non-zero value into return register to indicate e
                       rror
   96 0000008A F04F 30FF       MOV              R0, #-1
   97 0000008E 4770            BX               LR
   98 00000090         
   99 00000090                 END



ARM Macro Assembler    Page 3 


Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\kalmanfilter_asm.d -o.\objects\kalmanfilter_asm.o -IC
:\zzz\MP426_Lab1\Lab1_STM32F4Cube_Base_project\RTE -IC:\Keil_v5\ARM\PACK\ARM\CM
SIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.7.0\Drivers\
CMSIS\Device\ST\STM32F4xx\Include --predefine="__UVISION_VERSION SETA 515" --pr
edefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --list=.\listings\kalma
nfilter_asm.lst Kalmanfilter_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ERROR_OUT 0000008A

Symbol: ERROR_OUT
   Definitions
      At line 93 in file Kalmanfilter_asm.s
   Uses
      At line 28 in file Kalmanfilter_asm.s
      At line 31 in file Kalmanfilter_asm.s
      At line 34 in file Kalmanfilter_asm.s
      At line 37 in file Kalmanfilter_asm.s
      At line 40 in file Kalmanfilter_asm.s
      At line 51 in file Kalmanfilter_asm.s
      At line 61 in file Kalmanfilter_asm.s

Kalmanfilter_asm 00000000

Symbol: Kalmanfilter_asm
   Definitions
      At line 7 in file Kalmanfilter_asm.s
   Uses
      At line 6 in file Kalmanfilter_asm.s
Comment: Kalmanfilter_asm used once
LOOP 00000040

Symbol: LOOP
   Definitions
      At line 46 in file Kalmanfilter_asm.s
   Uses
      At line 84 in file Kalmanfilter_asm.s
Comment: LOOP used once
fn 00000000

Symbol: fn
   Definitions
      At line 5 in file Kalmanfilter_asm.s
   Uses
      None
Comment: fn unused
4 symbols
338 symbols in table
